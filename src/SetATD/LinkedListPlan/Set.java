package SetATD.LinkedListPlan;

import SetATD.Exceptions.SetException;

// Множество на связном списке
public class Set {
    private class Node {
        public int value;
        public Node next;

        public Node(int value, Node n) {
            this.value = value;
            next = n;
        }
    }

    private Node _head;


    public Set() {
        _head = null;
    }

    // Копирующий конструктор, задаем начало откда копируем и конец откуда копируем
    public Set(Node start, Node end) {
        copyFrom(start, end);
    }

    public Set union(Set set) {
        //----ЧАСТНЫЕ СЛУЧАИ----//
        // Если список этот же возвращает копию списка
        // Если оба списка пустых возвращаем пустой список
        // Если кто из списка пустой, возвращаем копию непустого списка
        //----ОСНОВНОЙ АЛГОРИТМ----//
        // Создаем копию из первого множества
        // Инициализируем голову нового списка, присваеваем значение наименьшой головы из двух списков
        // Идем элементам второго множества и вызываем findClosest первого, чтобы найти элемент для копирования
        // Таким образом выставляем все значения
        // Если значения равны, тогда мы берем любое, и продвигаемся дальше по двум спискам
        // Мы ищем наименьший элемент из двух список и копируем его следущим элементом
        // Если кто-то из списков остался не пустым мы должны скопировать откуда все его элементы с помощью копирующего метода
        return null;
    }

    public Set intersection(Set set) {
        //----ЧАСТНЫЕ СЛУЧАИ----//
        // Если список этот же возвращает копию списка с помошъю копирующего конструктора
        // Если хотя бы один из списков пустой возвращаем пустой список
        //----ОСНОВНОЙ АЛГОРИТМ----//
        // Создаем копию из первого множества с помощью копирущего констрктора
        // С помощью метода findVa
        // Также в процессе поиска мы должны инициализовать голову, если новый список еще не инициализрован
        // Если не равны мы продвигаем только наименьший из двух списков
        return null;
    }

    public Set difference(Set set) {
        //----ЧАСТНЫЕ СЛУЧАИ----//
        //----ОСНОВНОЙ АЛГОРИТМ----//  // Если список этот же список или входящий список пустой возвращаем пустой список
        //        // Если исходный список пустой возвращает копию вх
        // Создаем копию из первого множества с помощью копирущего констрктора
        // Если значения равны,  продвигаемся дальше по двум спискам
        // Если не равны мы продвигаем только наименьший из двух списков
        // Если значение из входящего списка становиться меньше чем в исходном значит заполняем его в новый список
        // Также в процессе поиска мы должны инициализовать голову, если новый список еще не инициализрован
        // Если входящий список остался не пустым мы должны скопировать откуда все его элементы с помощью копирующего метода
        return null;
    }

    public Set merge(Set set) {
        // Такой же алгоритм как в union, только без проверки на равенство
        return null;
    }

    // Написать публичный метод для проверки пересения


    // Присваивает новое множество
    // Необходимо скопировать ячейки то есть создать новые ноды
    public void assign(Set set) {
        copyFrom(set._head, set._head);
    }

    // Копирует входящее множества в исходное
    private void copyFrom(Node from, Node to) {
        // Если входящее множество пустое, то обнуляет список
        // Инициализируем голову, с таким же значение
        // Пробегаемся по входящему списку и копирует поэлементно
    }

    public boolean equal(Set set) {
        // Пробегается паралельно по двум спискам пока кто либо и них не станет пустым
        // Кажду итерация проверяем на равенство, если хотя бы один не равен, то возвращаем false
        // Оба списка должны были закончиться, проверяем что они оба равны null
        return false;
    }

    public Set find(Set set, int value) {
        // Такой же алгоритм как в member, но вызываем для двух множества отдельно
        return null;
    }

    public boolean member(int value) {
        // Вызываем метод findClosest от головы
        // Если next позиции соответствует значению, возвращаем true иначе false
        return true;
    }

    // Минимальный элемент это голова
    public int min() {
        // Если список пустой выбросить исключение
        if (_head == null) throw new SetException("Список пустой");
        return _head.value;
    }

    // Максимальный элемент это последний элемент списка
    public int max() {
        // Если список пустой выбросить исключение
        if (_head == null) throw new SetException("Список пустой");
        // До ходим до последного узла и возвращаем его
        Node current = _head;
        while (current.next != null) {
            current = current.next;
        }
        return current.value;
    }


    // Добавляет значение в множество, если его там нет, если нет ничего не делать
    public void insert(int value) {
        // Используем метод closestNode, чтобы найти позиции для вставки
        // Если список пустой или новое значение самое маленькое, тогда мы создаем новую голову
        // Если уже есть в множестве ничего не делаем
    }

    // Удаляет значение из множества, если оно там есть, если нет ничего не делать
    public void delete(int value) {
        // Если удаляемое значение голова, то голова равны следущему элементу после нее
        // Используем метод closestNode, чтобы найти позиции для удаления
    }

    public void makeNull() {
        _head = null;
    }

    // Находит узел который находит предыдущий элемент к этому значению
    // Если следущий элемент найденного равен числу значит число найдено
    // Может вернуть null, если нет головы(список пустой) или число
    private Node findValueLocation(Node start, int value) {
        // Пробегаемся по связному списку
        // Если текущее значение больше или равно числу возвращаем предыдущее к нему
        // Если список закончился возвращаем предыдущий
        return null;
    }


    // Вывод
    public void print() {
        if (_head == null) {
            System.out.println("Список пустой");
            return;
        }
        Node current = _head;
        while (current != null) {
            System.out.print(current.value + " ");
            current = current.next;
        }
        System.out.println();
    }
}
